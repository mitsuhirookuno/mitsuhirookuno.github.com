<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[バトルプログラマー＠すま Blog]]></title>
  <link href="http://mitsuhirookuno.github.com/atom.xml" rel="self"/>
  <link href="http://mitsuhirookuno.github.com/"/>
  <updated>2013-05-02T00:53:34+09:00</updated>
  <id>http://mitsuhirookuno.github.com/</id>
  <author>
    <name><![CDATA[Mitsuhiro Okuno]]></name>
    <email><![CDATA[mitsuhiro.okuno＠gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql-proxy-cacheを使ってみました]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/05/01/mysql-proxy-cache/"/>
    <updated>2013-05-01T23:57:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/05/01/mysql-proxy-cache</id>
    <content type="html"><![CDATA[<p>pg-poolⅡのmysql版
は無いものか？(特にqueryのキャッシュ目的)と探していた所 <br/>
<a href="https://github.com/clofresh/mysql-proxy-cache" title="mysql-proxy-cacheのページへ飛びます">mysql-proxy-cache</a>
なるものを発見しました。</p>

<p>ubuntu1204で、動かしてみましたので、そのメモを</p>

<p>まずは、動作に必要なパッケージを導入します。<br/>
パッケージが見つかるものはaptで、えいえいっ！っと</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo aptitude install mysql-proxy
</span><span class='line'>sudo aptitude install memcached
</span><span class='line'>sudo aptitude install luarocks
</span><span class='line'>sudo aptitude install liblua5.1-md5-0
</span><span class='line'>sudo aptitude install luasocket</span></code></pre></td></tr></table></div></figure>


<p>見つからないものは、debのパッケージがあったのでそちらを<br/>
debパッケージをxwindowsからダブルクリック！（いいのか！）<br/>
mysql-proxy-cache.lua はmysql-proxyのluaファイル置き場に配置しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget https://luamemcached.googlecode.com/files/liblua5.1-memcached0.deb
</span><span class='line'>wget https://raw.github.com/clofresh/mysql-proxy-cache/master/mysql-proxy-cache.lua</span></code></pre></td></tr></table></div></figure>


<p>それでは、満を持して。。。と、起動すると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql-proxy --proxy-lua-script=mysql-proxy-cache.lua</span></code></pre></td></tr></table></div></figure>


<p>起動しません。何かが足りないようです。</p>

<p>webサーフィンをして、今は以下のように記述する必要がある事が解りました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql-proxy --plugins=proxy --proxy-backend-addresses=localhost:3306</span></code></pre></td></tr></table></div></figure>


<p>この段階で、proxy指定でmysqlに接続可能です。</p>

<p>しかしクラ○ン。無駄作業ではないぞ。・・・と、
mysql-proxy-cacheを指定して起動すると<br/>
どうやら、パッケージが見つからないようです。<br/>
<a href="http://siguniang.wordpress.com/2012/04/14/lualuarocks-suck/" title="参考にさせて頂いたluaの技術情報サイトのページへ飛びます">参考にさせて頂いたluaの技術情報サイト</a>
の情報を元に、環境変数でパッケージの場所を教えます。<br/>
そして、以下のような起動スクリプトを書くことで、ようやく起動しました！</p>

<figure class='code'><figcaption><span>起動スクリプト - start-mysql-proxy-cache.bash </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LUA_PATH</span><span class="o">=</span><span class="s2">&quot;./?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua;/usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LUA_CPATH</span><span class="o">=</span><span class="s2">&quot;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/lib/i386-linux-gnu/lua/5.1/?.so;/usr/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so&quot;</span>
</span><span class='line'>mysql-proxy <span class="se">\</span>
</span><span class='line'>  --plugins<span class="o">=</span>proxy <span class="se">\</span>
</span><span class='line'>  --proxy-backend-addresses<span class="o">=</span>localhost:3306 <span class="se">\</span>
</span><span class='line'>  --proxy-lua-script<span class="o">=</span>/usr/lib/mysql-proxy/lua/mysql-proxy-cache.lua <span class="se">\</span>
</span><span class='line'>  --log-level<span class="o">=</span>debug
</span></code></pre></td></tr></table></div></figure>


<p>キャッシングされたQueryは当然超高速です。<br/>
ワーイ♪ゝ(▽｀<em>ゝ)(ノ</em>´▽)ノワーイ♪</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[activesupportの日付の最初と最後]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/04/30/activesupport-datetime/"/>
    <updated>2013-04-30T10:42:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/04/30/activesupport-datetime</id>
    <content type="html"><![CDATA[<h2>activesupportの日付計算は、とっても便利です。</h2>

<p>とは言え、どんなメソッドが実装されているかは全部把握していません。（私は）</p>

<p>今回は、仕事で色々な期間を選択する必要が合ったのですが <br/>
そこで役に立ったのは
<code>beginning_of_xxx (end_of_xxx)</code>
です。</p>

<p>これらは、与えられた日付から適切な最初(最後)に補正してくれます。<br/>
例えば、今週の月曜日なら</p>

<figure class='code'><figcaption><span>今週の月曜日 - beginning_of_this_week.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">beginning_of_week</span>
</span></code></pre></td></tr></table></div></figure>


<p>という具合です。</p>

<p>応用すると『ある日付の含まれる週に、この日が含まれるか？』も一行で（読みやすく？）出来ます。
みたいな事が書けちゃいます。</p>

<figure class='code'><figcaption><span>ある日付の含まれる週に、この日が含まれるか？ - in_this_week.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="p">(</span><span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;4/30&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">beginning_of_week</span> <span class="o">.</span><span class="n">.</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;4/30&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">end_of_week</span> <span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;5/1&#39;</span><span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>この
<code>beginning_of_xxx (end_of_xxx)</code>
には</p>

<ul>
<li>day</li>
<li>week</li>
<li>month</li>
<li>year</li>
<li>quarter</li>
</ul>


<p>が使えるみたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord経由でMySQLのプロシジャーを実行]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/04/03/active-record-use-mysql-procedure/"/>
    <updated>2013-04-03T14:10:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/04/03/active-record-use-mysql-procedure</id>
    <content type="html"><![CDATA[<h2>世の中、綺麗事では生きていけません。</h2>

<p>Railsを使ったからといって、既存の資産を無視しては生きられない事が多い<br/>
<strong>世知辛い世の中</strong>です。</p>

<p>今回はプロシジャーをRails3から利用する必要があったので<br/>
ActiveRecordから、接続を頂いて・・・( ´∀｀)bｸﾞｯ!  <br/>
と、機能を追加しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ActiveRecord::Base
</span><span class='line'>  def self.use_connection( &block )
</span><span class='line'>    block.call(self.connection)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>メソッドを追加して、ホイホイっと実行してみましたが。。。<br/>
一応動くのですが、一度プロシジャーを実行すると他のクエリーが実行出来なくなってしまいます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mysql2::Error: Commands out of sync; you can't run this command now: call dummyProc();
</span><span class='line'>ActiveRecord::StatementInvalid: Mysql2::Error: Commands out of sync; you can't run this command now: call dummyProc();
</span><span class='line'>from /home/okuno/workspace/QRapi/vendor/bundler/ruby/1.9.1/gems/activerecord-3.2.9/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:245:</span></code></pre></td></tr></table></div></figure>


<h3>もう、駄目ぽ  　</h3>

<p>　  <br/>
　  <br/>
　  <br/>
　  <br/>
　  <br/>
　</p>

<h2>で、対応</h2>

<p>どうやら、プロシジャーの場合は問い合わせの終了が終わってない扱いになってしまっている、と思われます。<br/>
このメソッドでは、ブロックを抜けたらクエリーは終了（という前提）で、以下の様にして対応しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ActiveRecord::Base
</span><span class='line'>  def self.use_connection( &block )
</span><span class='line'>    begin
</span><span class='line'>      block.call(self.connection)
</span><span class='line'>    ensure
</span><span class='line'>      self.connection.reconnect! unless connection.active?
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>どやぁ！(￣ー￣)<br/>
と、したい所ですが、下記のサイトを参考にさせて頂きました。m(__)m <br/>
<a href="http://ursdiganta.blogspot.jp/2011/07/mysql2-and-stored-procedures-in-rails-3.html" title="参考にさせて頂いたページへ飛びます">参考にさせて頂いたページ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年の桜]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/03/21/cherryblossom2013/"/>
    <updated>2013-03-21T01:49:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/03/21/cherryblossom2013</id>
    <content type="html"><![CDATA[<h2>2013年は例年よりやや早く、桜が咲いています</h2>

<p><img src="https://dl.dropbox.com/u/15789065/Octopress/20130320/DSC02524.JPG" title="今年の桜" alt="今年の桜" /></p>

<p>家族三人でのお花見は<strong>初めてです</strong>。<br/>
赤羽と言えば、<em>エレカシ</em>・・・そして<strong>桜</strong>ですな。</p>

<p>我が家の定番は荒川の川原の桜ですが、川の風で寒いせいか開花はやや遅れます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspecでblockを置き換える(mocha)の場合]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/03/11/mocha-find-each/"/>
    <updated>2013-03-11T12:53:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/03/11/mocha-find-each</id>
    <content type="html"><![CDATA[<p>Rspecでテストを作成中、find_eachを置き換えてテストを実行したい欲求が。。。<br/>
で、ブロックをstubにする方法は、手持ちの参考書では見つからないので、調べてみました。<br/>
利用しているmochのライブラリによって、書き方が異なる様です。が・・・</p>

<h2>yieldsを使えって事みたい</h2>

<p>私が利用している<strong>mocha</strong>の場合、<strong>yields</strong>で置き換える事が出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User.stubs(:find_each).yields( User.new( :name 'neko' ) )</span></code></pre></td></tr></table></div></figure>


<p>メソッドチェーンで複数指定すると・・・<br/>
一回目の呼び出し、二回目の呼び出しと（二回目以降は後勝ち）内容を変えることが出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User.stubs(:find_each).yields( User.new( :name 'neko' ) ).then.yields( User.new( :name 'inu' ) )</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVNのhookスクリプト]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/02/12/svnhook/"/>
    <updated>2013-02-12T13:49:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/02/12/svnhook</id>
    <content type="html"><![CDATA[<p>SVNにcommitが行われた際に、
<em>jenkinsのJOBを起動するスクリプト</em><br/>
を作成しました。<br/>
はい、あまり人に自慢出来る物ではないです・・・<br/>
( ・´ｰ・｀)ﾄﾞﾔｧ <br/>
svnサーバーのrubyが極めて古い場合などに有効です</p>

<p><strong> hookスクリプト（本体) </strong></p>

<figure class='code'><figcaption><span> (svnhook.rb)</span> <a href='http://mitsuhirookuno.github.com/downloads/code/sample/svnhook/svnhook.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;yaml&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repository</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">revision</span>   <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="no">SETTING</span>    <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">changed_output</span> <span class="o">=</span> <span class="sb">`</span><span class="si">#{</span><span class="no">SETTING</span><span class="o">[</span><span class="s1">&#39;PATH_TO_SVNLOOK&#39;</span><span class="o">]</span><span class="si">}</span><span class="sb"> changed </span><span class="si">#{</span><span class="n">repository</span><span class="si">}</span><span class="sb"> -r </span><span class="si">#{</span><span class="n">revision</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'><span class="no">SETTING</span><span class="o">[</span><span class="s1">&#39;PATH_AND_URL_PAIR&#39;</span><span class="o">].</span><span class="n">each</span><span class="p">{</span> <span class="o">|</span> <span class="n">match</span><span class="p">,</span> <span class="n">url</span> <span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">match</span><span class="o">.</span><span class="n">instance_of?</span><span class="p">(</span><span class="no">Regexp</span><span class="p">)</span>
</span><span class='line'>    <span class="sb">`curl </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="sb">`</span> <span class="k">if</span> <span class="n">changed_output</span><span class="o">.</span><span class="n">match</span><span class="p">(</span> <span class="n">match</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="sb">`curl </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="sb">`</span> <span class="k">if</span> <span class="n">changed_output</span><span class="o">.</span><span class="n">match</span><span class="p">(</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span> <span class="n">match</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> hookスクリプト（設定ファイル） </strong><br/>
正規表現も利用可能です</p>

<figure class='code'><figcaption><span> (svnhook.yaml)</span> <a href='http://mitsuhirookuno.github.com/downloads/code/sample/svnhook/svnhook.yaml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">PATH_TO_SVNLOOK</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">/usr/local/subversion-1.6.11/bin/svnlook</span>
</span><span class='line'><span class="l-Scalar-Plain">PATH_AND_URL_PAIR</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">trunk/YourProject/app</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://jenkins/job/YourProject/build?delay=0sec</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="kt">!ruby</span><span class="l-Scalar-Plain">/regexp /trunk\/YourProject\/(app|spec|lib)/</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://jenkins/job/YourProject/build?delay=0sec</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> post-commit導入例 </strong><br/>
もしこのスクリプトを利用する酔狂な人が居た場合は、post-commitへ<br/>
こーんな感じで追記してみてください</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>${SVN_ROOT}/hooks/svnhook.rb $REPOS $REV ${SVN_ROOT}/hooks/svnhook.yaml </span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordは、Threadを分けたら自分でコネクションを閉じないと駄目だった]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/01/24/activerecord-database-connections-will-not-be-closed/"/>
    <updated>2013-01-24T10:05:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/01/24/activerecord-database-connections-will-not-be-closed</id>
    <content type="html"><![CDATA[<p>ある日から、作成中のアプリが</p>

<pre><code>DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
</code></pre>

<p>等と、定期的にワーニングを出力するようになっていました。<br/>
また、その際にコネクションを全部リフレッシュするのか <em>とっても遅くなる</em> のです。</p>

<p>ぐぐってみても解らず、<strong>(´ε｀；)ｳｰﾝ…</strong> と、悩んでいましたが  <br/>
ワーニングを見てみると、<strong>『スレッドを実行したら自分でコネクションを閉じてね。』</strong>
とまんまの答えが・・・</p>

<p>はい、閉じます。</p>

<pre><code>Thread.new {
  begin
    block.call
  rescue =&gt; ex
    logger.info ex
  ensure
    ActiveRecord::Base.connection.close
  end
}
</code></pre>

<p>これは、恥ずかしい(；・∀・)   <br/>
同じようなうっかりさんが、居ないことを願って・・・<br/>
余談ですが、<strong>ruby</strong>で<strong>ensure</strong>を使うのって余り無いのでトキメキました</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveResourceで、複数形のルールを無効にする]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/01/24/unpluralize-activeresource/"/>
    <updated>2013-01-24T09:20:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/01/24/unpluralize-activeresource</id>
    <content type="html"><![CDATA[<p><em>ActiveResource</em> でも、 <em>ActiveRecord</em> と同じく<strong>複数形ルール</strong>を無効にしてみました</p>

<p>既存のテーブルを已む無く利用する為(?) <strong>pluralize_table_names</strong> が設定出来る<em>ActiveRecord</em>と違って<br/>
<em>ActiveResouce</em>は、<strong>そんな設定が出来ません</strong></p>

<p>そもそも、そんな状況で複数形ルールを無視すんなよ！<strong>(#ﾟДﾟ)ｺﾞﾙｧ!! </strong><br/>
って、お話もあるでしょうが、大人の事情もありまして</p>

<p><strong>environment.rb</strong> に追記してみました。</p>

<figure class='code'><figcaption><span> (environment.rb)</span> <a href='http://mitsuhirookuno.github.com/downloads/code/sample/unpluralize-activeresource/20130104/environment.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># 複数形のルールを無効化</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ActiveResource</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">UnPluralizeBase</span> <span class="o">&lt;</span> <span class="no">ActiveResource</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">collection_name</span>
</span><span class='line'>        <span class="vi">@collection_name</span> <span class="o">||=</span> <span class="n">element_name</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>多分、もっとcoolな方法があるとは思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[githubとjenkins、始めの一歩]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/01/14/start-github-and-jenkins/"/>
    <updated>2013-01-14T00:04:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/01/14/start-github-and-jenkins</id>
    <content type="html"><![CDATA[<p>こつこつと<a href="http://github.com/" title="github公式へ飛びます">github</a>と<a href="http://jenkins-ci.org/" title="jenkins公式へ飛びます">jenkins</a>の練習をしています。  <br/>
<strong>職場でもjenkinsは導入している</strong>のですが、スケジュールを理由に<em>満足のいく状態を保てません</em>。</p>

<p>仕事は仕事として、個人的なVPS上で<strong>どんな事が出来そうなのか？</strong>を、試しています。<br/>
現在の進捗は、<a href="http://github.com/mitsuhirookuno" title="私のgithubです">俺々github</a>と<a href="http://jenkins.rubyprogrammer.info/" title="私のVPS上のjenkinsです">俺々jenkins</a>を連携させ、テストやコード解析を行う手順のみが完成<br/>
<em>アプリケーション自体は、ハローワールド的</em>なありさまです。</p>

<h3>尚、現在動作している筈の解析ツールは・・・</h3>

<ul>
<li><a href="http://ruby.sadi.st/Flog.html" title="flogのページへ飛びます">flog</a>でコードの複雑さ</li>
<li><a href="http://github.com/seattlerb/flay" title="flayのページへ飛びます">flay</a>で類似性</li>
<li><a href="http://roodi.rubyforge.org/" title="roodiのページへ飛びます">roodi</a>でコードの匂い</li>
<li><a href="http://brakemanscanner.org/" title="brakemanのページへ飛びます">brakeman</a> でセキュリティ
をチェック出来る筈です。</li>
</ul>


<p>何か課題をつくり、この構成でどの程度やっていけるのか？が</p>

<h1>今年の課題です。</h1>

<p><a href="http://jenkins.rubyprogrammer.info/job/Rails3Tutorial/" title="こんな感じです">jenkinsで視覚化</a>するとモチベーションあがりますね～！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[こんにちは、赤ちゃん]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/01/13/hello-baby/"/>
    <updated>2013-01-13T16:46:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/01/13/hello-baby</id>
    <content type="html"><![CDATA[<h1>娘が生まれました</h1>

<p><strong>2013年1月4日</strong> に、<em>娘</em>が生まれました。<br/>
これからは、育児エンジニアになります。<br/>
正直自信はありませんが、赤ちゃんの世話は結構嬉しいものです。
また、「赤ちゃんが親を育てる」とも聞きます。</p>

<p>これを無理やりにコードにすると</p>

<h2>今、父親として求められているお仕事</h2>

<figure class='code'><figcaption><span> (helloworld.rb)</span> <a href='http://mitsuhirookuno.github.com/downloads/code/sample/baby/helloworld.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">if</span> <span class="err">赤ちゃん</span><span class="o">.</span><span class="err">泣いている？</span>
</span><span class='line'><span class="err">　</span><span class="k">if</span> <span class="err">赤ちゃん</span><span class="o">.</span><span class="err">オシメ</span><span class="o">.</span><span class="err">汚れている？</span>
</span><span class='line'><span class="err">　　赤ちゃん</span><span class="o">.</span><span class="err">オシメ</span> <span class="o">&lt;&lt;</span> <span class="err">オシメ</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="err">　</span><span class="k">elsif</span> <span class="err">赤ちゃん</span><span class="o">.</span><span class="err">空腹？</span>
</span><span class='line'><span class="err">　　赤ちゃん</span> <span class="o">&lt;&lt;</span> <span class="err">ミルク</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="err">赤ちゃん</span><span class="o">.</span><span class="err">不機嫌</span>
</span><span class='line'><span class="err">　　抱っこする</span><span class="p">(</span><span class="err">赤ちゃん</span><span class="p">)</span>
</span><span class='line'><span class="err">　</span><span class="k">else</span>
</span><span class='line'><span class="err">　　</span><span class="k">raise</span> <span class="err">俺には解決できない</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;ギブです&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err">　</span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>っていう感じです。</p>

<p>娘には、自分とは違い本当の天才エンジニアなって貰いたいなぁと妄想しておきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kindle-Paperwhite(Wifi)買いました！]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/12/30/kindle-paperwhite/"/>
    <updated>2012-12-30T23:47:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/12/30/kindle-paperwhite</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/Kindle-Paperwhite/dp/B007OZO03M" title="Amazon商品ページへ飛びます">Kindle-Paperwhite</a>を買いました。<br/>
<img src="https://dl.dropbox.com/u/15789065/Octopress/20121230/DSC02414.JPG" title="kindleホーム画面" alt="kindleホーム画面" /></p>

<h2>読書</h2>

<p><em>読書</em> は、<strong>とっても快適</strong> です。<br/>
白黒の読みやすさと、画面書き換えの遅さがあまり気にならないからでしょう、、<br/>
<img src="https://dl.dropbox.com/u/15789065/Octopress/20121230/DSC02415.JPG" title="読書画面" alt="読書画面" /></p>

<h2>コミック</h2>

<p><em>コミック</em>を読む場合は、<strong>少し待たないといけない時がある</strong>ので人を選びます。<br/>
ゆっくりと読む人は気にならないし、画面はとても綺麗です。<br/>
<img src="https://dl.dropbox.com/u/15789065/Octopress/20121230/DSC02418.JPG" title="コミック画面" alt="コミック画面" /></p>

<h2>インターネット</h2>

<p>実は、<em>インターネット</em>も試用版という体で<strong>多少利用</strong>できます。<br/>
（twitter,facebook,gmail,hotmail等は使えそうです）<br/>
流石に、書き換えのゆったりしたE-inkでは、オマケ程度の機能ではありますが<br/>
あれば使うかもしれません。<br/>
<img src="https://dl.dropbox.com/u/15789065/Octopress/20121230/DSC02416.JPG" title="ブックマーク画面" alt="ブックマーク画面" /></p>

<p>※3G版では、書籍のダウンロードとwikipediaは無料で利用できるそうです。</p>

<p>画面はスリープ状態でも、壁紙が表示されていたりパッケージを開けたときにも画面に&#8221;Hello&#8221;が表示されているのがとっても印象的です。 <br/>
<a href="http://ameblo.jp/nakagawa-shoko/entry-11438146900.html" title="しょこたんblogへ飛びます">中川翔子さんのblog</a> でもとりあげられており、胸熱です。</p>

<h3>※2013/01/02追記</h3>

<p>カバーとケースは100円均一の品を利用しました。<br/>
kindleは安いので、ケースもリーズナブルに乗り切りたいと思います。<br/>
<img src="https://dl.dropbox.com/u/15789065/Octopress/20121230/DSC02422.JPG" title="kindleホーム画面" alt="kindleホーム画面" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyPython、これはいいものだ]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/11/04/rubypython/"/>
    <updated>2012-11-04T23:27:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/11/04/rubypython</id>
    <content type="html"><![CDATA[<p>rubyのパッケージ管理に、<em>bundler</em>を使い始めてから<br/>
どんなパッケージを利用しているのかに興味を持つようになりました。<br/>
そんな中、どーにも気になるパッケージ名があったのです。</p>

<h3>その名も・・・(ﾟＡﾟ;)ｺﾞｸﾘ</h3>

<p><a href="http://rubypython.rubyforge.org/" title="RubyPython公式へ飛びます">RubyPython</a></p>

<p>名前だけで見れば、これは恐らく<br/>
<em>スマフォ</em>に例えれば、<strong>iOS&amp;Andoroid</strong>。いや<strong>iOroid</strong><br/>
<em>企業</em>に例えれば、<strong>Google&amp;Apple</strong>。いや<strong>Goople</strong><br/>
<em>食べ物</em>に例えれば、<strong>カツカレー</strong></p>

<p>などと、茶番はここまでにして、<strong>Let&#8217;s Try</strong></p>

<h2>まずはPython側で、呼び出される簡単なメソッドを実装します。</h2>

<ul>
<li>ただのprint文</li>
<li>引数と戻り値を持ったprint文</li>
</ul>


<p>を、関数として定義します</p>

<figure class='code'><figcaption><span> (called_ruby.py)</span> <a href='http://mitsuhirookuno.github.com/downloads/code/sample/rubypython/20121104/called_ruby.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">print_python</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;python:&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">print_python_with_argument</span><span class="p">(</span> <span class="n">arg1</span> <span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;python:&quot;</span><span class="p">,</span> <span class="n">arg1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">arg1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>そして、Ruby側で呼び出す処理を記述します。</h2>

<ul>
<li>Pythonのクラス(cPickle)の呼び出し、とメソッド実行</li>
<li>自作したPythonモジュールの読み込み</li>
<li>&#8220;ただのprint文&#8221;の呼び出し</li>
<li>&#8220;引数と戻り値を持ったprint文&#8221;の呼び出し</li>
</ul>


<p>を、定義します</p>

<figure class='code'><figcaption><span> (call_python.rb)</span> <a href='http://mitsuhirookuno.github.com/downloads/code/sample/rubypython/20121104/call_python.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># -*- encoding: utf-8 -*-</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;rubypython&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RubyPython</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;Pythonのクラスを呼び出す&#39;</span>
</span><span class='line'><span class="n">cPickle</span> <span class="o">=</span> <span class="no">RubyPython</span><span class="o">.</span><span class="n">import</span><span class="p">(</span><span class="s2">&quot;cPickle&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">cPickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="s2">&quot;Testing RubyPython.&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">rubify</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;Pythonの自作メソッドを呼び出す&#39;</span>
</span><span class='line'><span class="n">dir</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="n">sys</span> <span class="o">=</span> <span class="no">RubyPython</span><span class="o">.</span><span class="n">import</span> <span class="s1">&#39;sys&#39;</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">called_ruby</span> <span class="o">=</span> <span class="no">RubyPython</span><span class="o">.</span><span class="n">import</span><span class="p">(</span><span class="s2">&quot;called_ruby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">called_ruby</span><span class="o">.</span><span class="n">print_python</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">called_ruby</span><span class="o">.</span><span class="n">print_python_with_argument!</span><span class="p">(</span> <span class="n">arg1</span><span class="p">:</span> <span class="s2">&quot;Ruby String&quot;</span> <span class="p">)</span><span class="o">.</span><span class="n">rubify</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">called_ruby</span><span class="o">.</span><span class="n">print_python_with_argument!</span><span class="p">(</span> <span class="n">arg1</span><span class="p">:</span> <span class="mi">1234</span> <span class="p">)</span><span class="o">.</span><span class="n">rubify</span>
</span><span class='line'>
</span><span class='line'><span class="no">RubyPython</span><span class="o">.</span><span class="n">stop</span>
</span></code></pre></td></tr></table></div></figure>


<h2>これを実行すると</h2>

<pre><code>Pythonのクラスを呼び出す
S'Testing RubyPython.'
p1
.
Pythonの自作メソッドを呼び出す
python:
python: Ruby String
Ruby String
python: 1234
1234
</code></pre>

<p>おぉ！</p>

<p><strong>RubyからPythonの呼び出し、簡単な引数の受け渡しが出来る事</strong>は<br/>
あっさり確認出来ました。</p>

<p>流石に、Rubyのコード中にPyhotnが記述できる訳ではないみたいです。<br/>
<em>RubyからPythonを呼び出す需要</em>があるかは解りません。<br/>
が、競うより共存の方に時間を使うほうが価値があるかも？と思います。</p>

<p>RubyPythonは、PythonからRubyを実行したり、例外をRubyで処理したり等沢山の機能があるようです。  <br/>
続く。。。かも？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[チートしようぜ！(ruby cheat sheets)]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/10/26/cheat-sheets/"/>
    <updated>2012-10-26T09:13:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/10/26/cheat-sheets</id>
    <content type="html"><![CDATA[<p>夜中に<em>mocha</em>でのテストの書き方が解らね～とネットを徘徊していると。。。</p>

<h4>便利なサイトを発見しました。</h4>

<p><a href="http://cheat.errtheblog.com/s/mocha/" title="チートシートサイト(mocha)へ飛びます">mochaチートシート</a>
のページです。<br/>
<strong>チートシート</strong>（カンニングペーパー）の言葉のイメージは悪いものの、先駆者が作ってくれた技術Tipsメモって事です。</p>

<p>どうやら、他にも沢山のチートシートがあるらしく<br/>
<a href="http://cheat.errtheblog.com/" title="チートシートサイトへ飛びます">トップページ</a>を見て見ることに<br/>
あれ・・・？<br/>
gemコマンドの説明がある、と言う事は、、、<strong>「こいつ・・・動くぞ！」</strong></p>

<h2>コマンドとしてインストール可能</h2>

<pre><code>$ gem install cheat
Fetching: cheat-1.3.0.gem (100%)
Successfully installed cheat-1.3.0
1 gem installed
Installing ri documentation for cheat-1.3.0...
Installing RDoc documentation for cheat-1.3.0...
</code></pre>

<p>なんと、<em>アプリとしてインストール</em>が出来ちゃいます。</p>

<h3>使い方は</h3>

<ul>
<li>cheatコマンドの使い方<br/>
<code>cheat cheat</code></li>
<li>チートシート一覧を見る<br/>
<code>cheat sheets</code></li>
<li>チートシート一覧からrspecを探す場合<br/>
<code>cheat sheets | grep rspec</code></li>
<li>cheatコマンドの使い方<br/>
<code>cheat sheets | grep rspec</code></li>
<li>mochaのチートシート<br/>
<code>cheat mocha</code></li>
<li><p>vimのチートシートと出力例を一部<br/>
<code>cheat vim</code></p>

<pre><code>Cursor movement

h - move left
j - move down
k - move up
l - move right
ctrl-b - page up
以下、割愛
</code></pre></li>
</ul>


<p>コピーペーストの文化は、<strong>技術的負債</strong>に繋がりますが<br/>
使い方次第では、とっても便利なものです。 <br/>
これ日本語化を誰かしてくれないかな～(cheatjみたいな）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VPSのUbuntuを1210へアップデート]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/10/25/ubuntu1210update/"/>
    <updated>2012-10-25T08:49:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/10/25/ubuntu1210update</id>
    <content type="html"><![CDATA[<p><a href="http://www.ubuntu.com/" title="ubuntu公式へ飛びます">Ubuntu</a>
のパッケージ管理は優秀で、<em>1204LTS(Precise Pangolin)</em>では脳天気にパッケージを更新しても問題は一度もありませんでした。<br/>
ちょっとこれに気を良くして・・・現在最新である<em>1210(Quantal Quetzal)</em>へ、無謀にも挑戦しようと考えました。</p>

<p>今思うと、折角LTS(長期サポート)版を選択したのに何やってるの！とか<br/>
己の力量を弁えろ等・・・自分の無謀さに乾杯です。</p>

<p>バージョンアップは簡単、パッケージ管理アプリにLTS以外も表示させるだけです。<br/>
<strong>問題が全く発生せず、楽々バージョンアップ！</strong>しました。<br/>
って事は流石に無く、<strong>二つの問題があって（内一つは解決していません）</strong></p>

<p>一つ目は、pukiwikiが動かなくなりました。<br/>
これは、PHPのバージョンが上がった為、pukiwikiで利用しているメソッドが実装されていることが原因 <br/>
<a href="http://pukiwiki.sourceforge.jp/dev/?BugTrack2%2F349" title="この方法で動きました！">対処方法</a>
メンテナンスの終わったpukiwikiでは無く、新しいものを探すべき時なのでしょうね～
<a href="http://pukiwiki.logue.be/" title="PHP5.4も対応しているpukiwiki">Pukiwiki Advance</a>等を、おいおい試してみます。</p>

<p>二つ目は、仮想ビデオデバイスcirrusのドライバーが上手く動いてくれない（対応していない？）事です。<br/>
こちらは、cirrusでどうしても問題が解決できず、ドライバーを変更する方法で、解決いや回避をしました。</p>

<p>問題はあったもののLinuxでのアップデートも簡単になったものですねぇ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VPSのssh用Portを変更しました]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/10/10/vps-ssh-port/"/>
    <updated>2012-10-10T09:27:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/10/10/vps-ssh-port</id>
    <content type="html"><![CDATA[<p><em>VPS</em> にドメインを割り当ててから、一ヶ月が経過した所です。<br />
今の所はアクセスも無く、そんなに攻撃にさらされることもあるまいと思いました。<br /></p>

<br />


<p>が・・・<br />
<em>sshのログ</em> (/var/log/auth.log)を見たら、かなりの攻撃の後がありました。<br /></p>

<br />


<h4>こんな <strong>スクリプト</strong> で、集計した所</h4>

<figure class='code'><figcaption><span> (password_failed_check.rb)</span> <a href='http://mitsuhirookuno.github.com/downloads/code/sample/password_failed_check.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pp&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">REGEXP_AUTH_FAILED</span><span class="o">=</span><span class="sr">/Failed password for (root|invalid user ([^ ]+)) from (\d+\.\d+\.\d+\.\d+) port \d+ ssh2$/</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">setDenyHostMap</span><span class="p">(</span> <span class="n">map</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">ip_address</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">map</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="n">ip_address</span><span class="p">)</span>
</span><span class='line'>      <span class="n">user_map</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="n">fetch</span> <span class="n">ip_address</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">user_map</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">user_map</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">user_map</span><span class="o">.</span><span class="n">store</span><span class="p">(</span> <span class="n">user</span><span class="p">,</span> <span class="p">(</span><span class="n">user_map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">user</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">user_map</span><span class="o">.</span><span class="n">store</span><span class="p">(</span> <span class="n">user</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">map</span><span class="o">.</span><span class="n">store</span><span class="p">(</span> <span class="n">ip_address</span><span class="p">,</span> <span class="n">user_map</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">deny_host_map</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;/var/log/auth.log&#39;</span><span class="p">,</span><span class="s1">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n/</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="n">line</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="no">REGEXP_AUTH_FAILED</span><span class="p">){</span><span class="o">|</span> <span class="n">root</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">ip_address</span> <span class="o">|</span>
</span><span class='line'>    <span class="n">setDenyHostMap</span><span class="p">(</span> <span class="n">deny_host_map</span><span class="p">,</span> <span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">nil?</span><span class="p">)?</span> <span class="n">root</span><span class="ss">:user</span><span class="p">,</span> <span class="n">ip_address</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">deny_host_map</span><span class="o">.</span><span class="n">pretty_inspect</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>なんと13個のホストから、 合計2000回ほど・・・∑(・ω・ﾉ)ﾉ</code></p>

<br />


<p>これは放置は危険ですし、 /etc/hosts.deny で対応するには数的に骨が折れそうなので<br />
今回は、Portを49152以降のDYNAMICな領域に移しました。（REGISTEREDの方が良いかな？）<br />
 (；´Д`A &#8220;`<br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ズゴック豆腐を買いました]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/10/08/zgok-doufu/"/>
    <updated>2012-10-08T22:39:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/10/08/zgok-doufu</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropbox.com/u/15789065/Octopress/20121008/CameraZOOM-20121003210125142.jpg" title="ズゴック豆腐パッケージ" alt="ズゴック豆腐パッケージ" /></p>

<h3>買いました！ズゴック豆腐（と、デザートザク豆腐）</h3>

<p><a href="http://sagamiya-kk.co.jp/" title="相模屋">相模屋</a>の新商品です<br />
最早、 <em>技術blog</em> を目指していた事を忘れそうです<br />
（一応、画像添付を試すという名目ではあります）<br />
これ、 <em>苦労して発売日に鹵獲しました</em> が、今日普通に <strong>近所のダイエーに山積みされてました</strong>。 <br />
(´；ω；｀)ブワッ</p>

<p><img src="https://dl.dropbox.com/u/15789065/Octopress/20121008/CameraZOOM-20121003210602748.jpg" title="ズゴック豆腐" alt="ズゴック豆腐" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown記法のチートシート]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/10/03/markdown-cheat-sheat/"/>
    <updated>2012-10-03T08:45:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/10/03/markdown-cheat-sheat</id>
    <content type="html"><![CDATA[<h2>Markdown記法はどうすればいいの？</h2>

<p><em>Octpress</em> を使うとやっぱり知りたい <em>Markdown記法</em> <br />
<strong>やっぱり</strong> と言うべきか、 <strong>解りやすい解説</strong> を見つけました <br />
<a href="https://github.com/NeQuissimus/MarkdownByExample/wiki/MarkdownSyntax" title="チートシートはこちら！">Markdown記法チートシート</a> <br />
<a href="http://yardoc.org/" title="Yard本家サイト">Yard</a>の記法なども覚えて行かないとなりません <br />
と、言う訳で <br />
今回は無駄にMarkdown記法を使ってます <br /></p>

<h3>以下は完全なお試し</h3>

<ul>
<li>リスト</li>
</ul>


<p><code>コードワンライナー</code></p>

<pre><code>コードブロックも出来る。
syntaxhighlighterも併用できるかなぁ
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressにテーマを適用しました]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/09/30/orange-version-of-oct2-octopress-theme/"/>
    <updated>2012-09-30T20:38:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/09/30/orange-version-of-oct2-octopress-theme</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/roberto/oct2-orange" title="get theme!">orange version of oct2 octopress theme</a>
というテーマを適用させて頂きました。<br />
何かエンジニアっぽい感じでワクワクします。<br />
<em>markdown</em> の書き方を覚えないと！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bloggerと併用予定です]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/09/30/blogger/"/>
    <updated>2012-09-30T20:21:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/09/30/blogger</id>
    <content type="html"><![CDATA[<p><em>git</em> の経験値があがるまではと。。。言い訳をして<br />
暫くは <em>blogger</em> に住んでいようかと思います。<br />
<a href="http://blogger.rubyprogrammer.info/" title="ココ！">すま＠blogger</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[こんにちは Octopress]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/09/30/hello-octopress/"/>
    <updated>2012-09-30T19:48:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/09/30/hello-octopress</id>
    <content type="html"><![CDATA[<p>テーマを色々変えてたら、作り直しになっちゃった。<br/>
 (´；ω；｀)ｳｯ</p>
]]></content>
  </entry>
  
</feed>
