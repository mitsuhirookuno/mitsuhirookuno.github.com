<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | バトルプログラマー＠すま Blog]]></title>
  <link href="http://mitsuhirookuno.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://mitsuhirookuno.github.com/"/>
  <updated>2013-01-24T10:27:45+09:00</updated>
  <id>http://mitsuhirookuno.github.com/</id>
  <author>
    <name><![CDATA[Mitsuhiro Okuno]]></name>
    <email><![CDATA[mitsuhiro.okuno＠gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveRecordは、Threadを分けたら自分でコネクションを閉じないと駄目だった]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/01/24/activerecord-database-connections-will-not-be-closed/"/>
    <updated>2013-01-24T10:05:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/01/24/activerecord-database-connections-will-not-be-closed</id>
    <content type="html"><![CDATA[<p>ある日から、作成中のアプリが</p>

<pre><code>DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
</code></pre>

<p>等と、定期的にワーニングを出力するようになっていました。<br/>
また、その際にコネクションを全部リフレッシュするのか <em>とっても遅くなる</em> のです。</p>

<p>ぐぐってみても解らず、<strong>(´ε｀；)ｳｰﾝ…</strong> と、悩んでいましたが  <br/>
ワーニングを見てみると、<strong>『スレッドを実行したら自分でコネクションを閉じてね。』</strong>
とまんまの答えが・・・</p>

<p>はい、閉じます。</p>

<pre><code>Thread.new {
  begin
    block.call
  rescue =&gt; ex
    logger.info ex
  ensure
    ActiveRecord::Base.connection.close
  end
}
</code></pre>

<p>これは、恥ずかしい(；・∀・)   <br/>
同じようなうっかりさんが、居ないことを願って・・・<br/>
余談ですが、<strong>ruby</strong>で<strong>ensure</strong>を使うのって余り無いのでトキメキました</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveResourceで、複数形のルールを無効にする]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/01/24/unpluralize-activeresource/"/>
    <updated>2013-01-24T09:20:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/01/24/unpluralize-activeresource</id>
    <content type="html"><![CDATA[<p><em>ActiveResource</em> でも、 <em>ActiveRecord</em> と同じく<strong>複数形ルール</strong>を無効にしてみました</p>

<p>既存のテーブルを已む無く利用する為(?) <strong>pluralize_table_names</strong> が設定出来る<em>ActiveRecord</em>と違って<br/>
<em>ActiveResouce</em>は、<strong>そんな設定が出来ません</strong></p>

<p>そもそも、そんな状況で複数形ルールを無視すんなよ！<strong>(#ﾟДﾟ)ｺﾞﾙｧ!! </strong><br/>
って、お話もあるでしょうが、大人の事情もありまして</p>

<p><strong>environment.rb</strong> に追記してみました。<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (environment.rb)</span> <a href='/downloads/code/sample/unpluralize-activeresource/20130104/environment.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># 複数形のルールを無効化</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ActiveResource</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">UnPluralizeBase</span> <span class="o">&lt;</span> <span class="no">ActiveResource</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">collection_name</span>
</span><span class='line'>        <span class="vi">@collection_name</span> <span class="o">||=</span> <span class="n">element_name</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
多分、もっとcoolな方法があるとは思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[githubとjenkins、始めの一歩]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/01/14/start-github-and-jenkins/"/>
    <updated>2013-01-14T00:04:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/01/14/start-github-and-jenkins</id>
    <content type="html"><![CDATA[<p>こつこつと<a href="http://github.com/" title="github公式へ飛びます">github</a>と<a href="http://jenkins-ci.org/" title="jenkins公式へ飛びます">jenkins</a>の練習をしています。  <br/>
<strong>職場でもjenkinsは導入している</strong>のですが、スケジュールを理由に<em>満足のいく状態を保てません</em>。</p>

<p>仕事は仕事として、個人的なVPS上で<strong>どんな事が出来そうなのか？</strong>を、試しています。<br/>
現在の進捗は、<a href="http://github.com/mitsuhirookuno" title="私のgithubです">俺々github</a>と<a href="http://jenkins.rubyprogrammer.info/" title="私のVPS上のjenkinsです">俺々jenkins</a>を連携させ、テストやコード解析を行う手順のみが完成<br/>
<em>アプリケーション自体は、ハローワールド的</em>なありさまです。</p>

<h3>尚、現在動作している筈の解析ツールは・・・</h3>

<ul>
<li><a href="http://ruby.sadi.st/Flog.html" title="flogのページへ飛びます">flog</a>でコードの複雑さ</li>
<li><a href="http://github.com/seattlerb/flay" title="flayのページへ飛びます">flay</a>で類似性</li>
<li><a href="http://roodi.rubyforge.org/" title="roodiのページへ飛びます">roodi</a>でコードの匂い</li>
<li><a href="http://brakemanscanner.org/" title="brakemanのページへ飛びます">brakeman</a> でセキュリティ
をチェック出来る筈です。</li>
</ul>


<p>何か課題をつくり、この構成でどの程度やっていけるのか？が</p>

<h1>今年の課題です。</h1>

<p><a href="http://jenkins.rubyprogrammer.info/job/Rails3Tutorial/" title="こんな感じです">jenkinsで視覚化</a>するとモチベーションあがりますね～！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyPython、これはいいものだ]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/11/04/rubypython/"/>
    <updated>2012-11-04T23:27:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/11/04/rubypython</id>
    <content type="html"><![CDATA[<p>rubyのパッケージ管理に、<em>bundler</em>を使い始めてから<br/>
どんなパッケージを利用しているのかに興味を持つようになりました。<br/>
そんな中、どーにも気になるパッケージ名があったのです。</p>

<h3>その名も・・・(ﾟＡﾟ;)ｺﾞｸﾘ</h3>

<p><a href="http://rubypython.rubyforge.org/" title="RubyPython公式へ飛びます">RubyPython</a></p>

<p>名前だけで見れば、これは恐らく<br/>
<em>スマフォ</em>に例えれば、<strong>iOS&amp;Andoroid</strong>。いや<strong>iOroid</strong><br/>
<em>企業</em>に例えれば、<strong>Google&amp;Apple</strong>。いや<strong>Goople</strong><br/>
<em>食べ物</em>に例えれば、<strong>カツカレー</strong></p>

<p>などと、茶番はここまでにして、<strong>Let's Try</strong></p>

<h2>まずはPython側で、呼び出される簡単なメソッドを実装します。</h2>

<ul>
<li>ただのprint文</li>
<li>引数と戻り値を持ったprint文</li>
</ul>


<p>を、関数として定義します</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (called_ruby.py)</span> <a href='/downloads/code/sample/rubypython/20121104/called_ruby.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">print_python</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;python:&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">print_python_with_argument</span><span class="p">(</span> <span class="n">arg1</span> <span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;python:&quot;</span><span class="p">,</span> <span class="n">arg1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">arg1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>そして、Ruby側で呼び出す処理を記述します。</h2>

<ul>
<li>Pythonのクラス(cPickle)の呼び出し、とメソッド実行</li>
<li>自作したPythonモジュールの読み込み</li>
<li>"ただのprint文"の呼び出し</li>
<li>"引数と戻り値を持ったprint文"の呼び出し</li>
</ul>


<p>を、定義します</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (call_python.rb)</span> <a href='/downloads/code/sample/rubypython/20121104/call_python.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># -*- encoding: utf-8 -*-</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;rubypython&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RubyPython</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;Pythonのクラスを呼び出す&#39;</span>
</span><span class='line'><span class="n">cPickle</span> <span class="o">=</span> <span class="no">RubyPython</span><span class="o">.</span><span class="n">import</span><span class="p">(</span><span class="s2">&quot;cPickle&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">cPickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="s2">&quot;Testing RubyPython.&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">rubify</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;Pythonの自作メソッドを呼び出す&#39;</span>
</span><span class='line'><span class="n">dir</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="n">sys</span> <span class="o">=</span> <span class="no">RubyPython</span><span class="o">.</span><span class="n">import</span> <span class="s1">&#39;sys&#39;</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">called_ruby</span> <span class="o">=</span> <span class="no">RubyPython</span><span class="o">.</span><span class="n">import</span><span class="p">(</span><span class="s2">&quot;called_ruby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">called_ruby</span><span class="o">.</span><span class="n">print_python</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">called_ruby</span><span class="o">.</span><span class="n">print_python_with_argument!</span><span class="p">(</span> <span class="n">arg1</span><span class="p">:</span> <span class="s2">&quot;Ruby String&quot;</span> <span class="p">)</span><span class="o">.</span><span class="n">rubify</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">called_ruby</span><span class="o">.</span><span class="n">print_python_with_argument!</span><span class="p">(</span> <span class="n">arg1</span><span class="p">:</span> <span class="mi">1234</span> <span class="p">)</span><span class="o">.</span><span class="n">rubify</span>
</span><span class='line'>
</span><span class='line'><span class="no">RubyPython</span><span class="o">.</span><span class="n">stop</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>これを実行すると</h2>

<pre><code>Pythonのクラスを呼び出す
S'Testing RubyPython.'
p1
.
Pythonの自作メソッドを呼び出す
python:
python: Ruby String
Ruby String
python: 1234
1234
</code></pre>

<p>おぉ！</p>

<p><strong>RubyからPythonの呼び出し、簡単な引数の受け渡しが出来る事</strong>は<br/>
あっさり確認出来ました。</p>

<p>流石に、Rubyのコード中にPyhotnが記述できる訳ではないみたいです。<br/>
<em>RubyからPythonを呼び出す需要</em>があるかは解りません。<br/>
が、競うより共存の方に時間を使うほうが価値があるかも？と思います。</p>

<p>RubyPythonは、PythonからRubyを実行したり、例外をRubyで処理したり等沢山の機能があるようです。  <br/>
続く。。。かも？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[チートしようぜ！(ruby cheat sheets)]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2012/10/26/cheat-sheets/"/>
    <updated>2012-10-26T09:13:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2012/10/26/cheat-sheets</id>
    <content type="html"><![CDATA[<p>夜中に<em>mocha</em>でのテストの書き方が解らね～とネットを徘徊していると。。。</p>

<h4>便利なサイトを発見しました。</h4>

<p><a href="http://cheat.errtheblog.com/s/mocha/" title="チートシートサイト(mocha)へ飛びます">mochaチートシート</a>
のページです。<br/>
<strong>チートシート</strong>（カンニングペーパー）の言葉のイメージは悪いものの、先駆者が作ってくれた技術Tipsメモって事です。</p>

<p>どうやら、他にも沢山のチートシートがあるらしく<br/>
<a href="http://cheat.errtheblog.com/" title="チートシートサイトへ飛びます">トップページ</a>を見て見ることに<br/>
あれ・・・？<br/>
gemコマンドの説明がある、と言う事は、、、<strong>「こいつ・・・動くぞ！」</strong></p>

<h2>コマンドとしてインストール可能</h2>

<pre><code>$ gem install cheat
Fetching: cheat-1.3.0.gem (100%)
Successfully installed cheat-1.3.0
1 gem installed
Installing ri documentation for cheat-1.3.0...
Installing RDoc documentation for cheat-1.3.0...
</code></pre>

<p>なんと、<em>アプリとしてインストール</em>が出来ちゃいます。</p>

<h3>使い方は</h3>

<ul>
<li>cheatコマンドの使い方<br/>
<code>cheat cheat</code></li>
<li>チートシート一覧を見る<br/>
<code>cheat sheets</code></li>
<li>チートシート一覧からrspecを探す場合<br/>
<code>cheat sheets | grep rspec</code></li>
<li>cheatコマンドの使い方<br/>
<code>cheat sheets | grep rspec</code></li>
<li>mochaのチートシート<br/>
<code>cheat mocha</code></li>
<li><p>vimのチートシートと出力例を一部<br/>
<code>cheat vim</code></p>

<pre><code>Cursor movement

h - move left
j - move down
k - move up
l - move right
ctrl-b - page up
以下、割愛
</code></pre></li>
</ul>


<p>コピーペーストの文化は、<strong>技術的負債</strong>に繋がりますが<br/>
使い方次第では、とっても便利なものです。 <br/>
これ日本語化を誰かしてくれないかな～(cheatjみたいな）</p>
]]></content>
  </entry>
  
</feed>
