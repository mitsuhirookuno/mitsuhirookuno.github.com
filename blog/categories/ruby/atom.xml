<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | バトルプログラマー＠すま Blog]]></title>
  <link href="http://mitsuhirookuno.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://mitsuhirookuno.github.com/"/>
  <updated>2013-04-30T13:22:18+09:00</updated>
  <id>http://mitsuhirookuno.github.com/</id>
  <author>
    <name><![CDATA[Mitsuhiro Okuno]]></name>
    <email><![CDATA[mitsuhiro.okuno＠gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[activesupportの日付の最初と最後]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/04/30/activesupport-datetime/"/>
    <updated>2013-04-30T10:42:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/04/30/activesupport-datetime</id>
    <content type="html"><![CDATA[<h2>activesupportの日付計算は、とっても便利です。</h2>

<p>とは言え、どんなメソッドが実装されているかは全部把握していません。（私は）</p>

<p>今回は、仕事で色々な期間を選択する必要が合ったのですが <br/>
そこで役に立ったのは
<code>beginning_of_xxx (end_of_xxx)</code>
です。</p>

<p>これらは、与えられた日付から適切な最初(最後)に補正してくれます。<br/>
例えば、今週の月曜日なら</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>今週の月曜日 - beginning_of_this_week.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">beginning_of_week</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>という具合です。</p>

<p>応用すると『ある日付の含まれる週に、この日が含まれるか？』も一行で（読みやすく？）出来ます。
みたいな事が書けちゃいます。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ある日付の含まれる週に、この日が含まれるか？ - in_this_week.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="p">(</span><span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;4/30&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">beginning_of_week</span> <span class="o">.</span><span class="n">.</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;4/30&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">end_of_week</span> <span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;5/1&#39;</span><span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>この
<code>beginning_of_xxx (end_of_xxx)</code>
には</p>

<ul>
<li>day</li>
<li>week</li>
<li>month</li>
<li>year</li>
<li>quarter</li>
</ul>


<p>が使えるみたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord経由でMySQLのプロシジャーを実行]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/04/03/active-record-use-mysql-procedure/"/>
    <updated>2013-04-03T14:10:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/04/03/active-record-use-mysql-procedure</id>
    <content type="html"><![CDATA[<h2>世の中、綺麗事では生きていけません。</h2>

<p>Railsを使ったからといって、既存の資産を無視しては生きられない事が多い<br/>
<strong>世知辛い世の中</strong>です。</p>

<p>今回はプロシジャーをRails3から利用する必要があったので<br/>
ActiveRecordから、接続を頂いて・・・( ´∀｀)bｸﾞｯ!  <br/>
と、機能を追加しました。
```
class ActiveRecord::Base
  def self.use_connection( &amp;block )</p>

<pre><code>block.call(self.connection)
</code></pre>

<p>  end
end
<code>
メソッドを追加して、ホイホイっと実行してみましたが。。。  
一応動くのですが、一度プロシジャーを実行すると他のクエリーが実行出来なくなってしまいます。
</code>
Mysql2::Error: Commands out of sync; you can't run this command now: call dummyProc();
ActiveRecord::StatementInvalid: Mysql2::Error: Commands out of sync; you can't run this command now: call dummyProc();
from /home/okuno/workspace/QRapi/vendor/bundler/ruby/1.9.1/gems/activerecord-3.2.9/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:245:
```</p>

<h3>もう、駄目ぽ  　</h3>

<p>　  <br/>
　  <br/>
　  <br/>
　  <br/>
　  <br/>
　</p>

<h2>で、対応</h2>

<p>どうやら、プロシジャーの場合は問い合わせの終了が終わってない扱いになってしまっている、と思われます。<br/>
このメソッドでは、ブロックを抜けたらクエリーは終了（という前提）で、以下の様にして対応しました。<br/>
```
class ActiveRecord::Base
  def self.use_connection( &amp;block )</p>

<pre><code>begin
  block.call(self.connection)
ensure
  self.connection.reconnect! unless connection.active?
end
</code></pre>

<p>  end
end
```
どやぁ！(￣ー￣)<br/>
と、したい所ですが、下記のサイトを参考にさせて頂きました。m(__)m <br/>
<a href="http://ursdiganta.blogspot.jp/2011/07/mysql2-and-stored-procedures-in-rails-3.html" title="参考にさせて頂いたページへ飛びます">参考にさせて頂いたページ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspecでblockを置き換える(mocha)の場合]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/03/11/mocha-find-each/"/>
    <updated>2013-03-11T12:53:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/03/11/mocha-find-each</id>
    <content type="html"><![CDATA[<p>Rspecでテストを作成中、find_eachを置き換えてテストを実行したい欲求が。。。<br/>
で、ブロックをstubにする方法は、手持ちの参考書では見つからないので、調べてみました。<br/>
利用しているmochのライブラリによって、書き方が異なる様です。が・・・</p>

<h2>yieldsを使えって事みたい</h2>

<p>私が利用している<strong>mocha</strong>の場合、<strong>yields</strong>で置き換える事が出来ます。
<code>
User.stubs(:find_each).yields( User.new( :name 'neko' ) )
</code></p>

<p>メソッドチェーンで複数指定すると・・・<br/>
一回目の呼び出し、二回目の呼び出しと（二回目以降は後勝ち）内容を変えることが出来ます。<br/>
<code>
User.stubs(:find_each).yields( User.new( :name 'neko' ) ).then.yields( User.new( :name 'inu' ) )
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVNのhookスクリプト]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/02/12/svnhook/"/>
    <updated>2013-02-12T13:49:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/02/12/svnhook</id>
    <content type="html"><![CDATA[<p>SVNにcommitが行われた際に、
<em>jenkinsのJOBを起動するスクリプト</em><br/>
を作成しました。<br/>
はい、あまり人に自慢出来る物ではないです・・・<br/>
( ・´ｰ・｀)ﾄﾞﾔｧ <br/>
svnサーバーのrubyが極めて古い場合などに有効です</p>

<p><strong> hookスクリプト（本体) </strong>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (svnhook.rb)</span> <a href='/downloads/code/sample/svnhook/svnhook.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;yaml&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repository</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">revision</span>   <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="no">SETTING</span>    <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">changed_output</span> <span class="o">=</span> <span class="sb">`</span><span class="si">#{</span><span class="no">SETTING</span><span class="o">[</span><span class="s1">&#39;PATH_TO_SVNLOOK&#39;</span><span class="o">]</span><span class="si">}</span><span class="sb"> changed </span><span class="si">#{</span><span class="n">repository</span><span class="si">}</span><span class="sb"> -r </span><span class="si">#{</span><span class="n">revision</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'><span class="no">SETTING</span><span class="o">[</span><span class="s1">&#39;PATH_AND_URL_PAIR&#39;</span><span class="o">].</span><span class="n">each</span><span class="p">{</span> <span class="o">|</span> <span class="n">match</span><span class="p">,</span> <span class="n">url</span> <span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">match</span><span class="o">.</span><span class="n">instance_of?</span><span class="p">(</span><span class="no">Regexp</span><span class="p">)</span>
</span><span class='line'>    <span class="sb">`curl </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="sb">`</span> <span class="k">if</span> <span class="n">changed_output</span><span class="o">.</span><span class="n">match</span><span class="p">(</span> <span class="n">match</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="sb">`curl </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="sb">`</span> <span class="k">if</span> <span class="n">changed_output</span><span class="o">.</span><span class="n">match</span><span class="p">(</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span> <span class="n">match</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong> hookスクリプト（設定ファイル） </strong><br/>
正規表現も利用可能です<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (svnhook.yaml)</span> <a href='/downloads/code/sample/svnhook/svnhook.yaml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">PATH_TO_SVNLOOK</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">/usr/local/subversion-1.6.11/bin/svnlook</span>
</span><span class='line'><span class="l-Scalar-Plain">PATH_AND_URL_PAIR</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">trunk/YourProject/app</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://jenkins/job/YourProject/build?delay=0sec</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="kt">!ruby</span><span class="l-Scalar-Plain">/regexp /trunk\/YourProject\/(app|spec|lib)/</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://jenkins/job/YourProject/build?delay=0sec</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong> post-commit導入例 </strong><br/>
もしこのスクリプトを利用する酔狂な人が居た場合は、post-commitへ<br/>
こーんな感じで追記してみてください
<code>
${SVN_ROOT}/hooks/svnhook.rb $REPOS $REV ${SVN_ROOT}/hooks/svnhook.yaml
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordは、Threadを分けたら自分でコネクションを閉じないと駄目だった]]></title>
    <link href="http://mitsuhirookuno.github.com/blog/2013/01/24/activerecord-database-connections-will-not-be-closed/"/>
    <updated>2013-01-24T10:05:00+09:00</updated>
    <id>http://mitsuhirookuno.github.com/blog/2013/01/24/activerecord-database-connections-will-not-be-closed</id>
    <content type="html"><![CDATA[<p>ある日から、作成中のアプリが</p>

<pre><code>DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
DEPRECATION WARNING: Database connections will not be closed automatically, please close your database connection at the end of the thread by calling `close` on your connection.  For example: ActiveRecord::Base.connection.close. (called from mon_synchronize at /home/mdcs/local/bin/ruby/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211)
</code></pre>

<p>等と、定期的にワーニングを出力するようになっていました。<br/>
また、その際にコネクションを全部リフレッシュするのか <em>とっても遅くなる</em> のです。</p>

<p>ぐぐってみても解らず、<strong>(´ε｀；)ｳｰﾝ…</strong> と、悩んでいましたが  <br/>
ワーニングを見てみると、<strong>『スレッドを実行したら自分でコネクションを閉じてね。』</strong>
とまんまの答えが・・・</p>

<p>はい、閉じます。</p>

<pre><code>Thread.new {
  begin
    block.call
  rescue =&gt; ex
    logger.info ex
  ensure
    ActiveRecord::Base.connection.close
  end
}
</code></pre>

<p>これは、恥ずかしい(；・∀・)   <br/>
同じようなうっかりさんが、居ないことを願って・・・<br/>
余談ですが、<strong>ruby</strong>で<strong>ensure</strong>を使うのって余り無いのでトキメキました</p>
]]></content>
  </entry>
  
</feed>
